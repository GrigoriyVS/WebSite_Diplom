Анализ предметной области. 
Роль интернета в жизни человека
Первый в мире сайт создал Тим Бернерс-Ли в 1990 году. На нём было описание новой технологии World Wide Web, основанной на протоколе передачи данных HTTP, системе адресации URI и языке гипертекстовой разметки HTML.
С тех пор сайты проникли во все сферы человеческой деятельности, при этом в каждой области сайт может выполнять совсем разные функции. Так же, не стоит забывать о средствах, которые готовы выделять компании на разработку и поддержание web-страниц. Именно по этому существует так много типов сайтов и с каждым годом классификация становится всё сложнее. [1]
Один из таких типов – это web-сервисы. Такой сайт может содержать в себе online инструмент(ы) для решения конкретной задачи. Уже не мало лет такие сервисы пользуюстся спросом и их применение с каждым годом набиирает всё больший оборот. Несколько примеров это – сайты отслеживающие текущую скорость соединения с интернетом, показывающие ip устройства с которого был выполнен в ход на страницу, конвертеры файлов в различные форматы и многое другое.
Прирост пользователей интернета и web-сервисов.
Каждый год We Are Social и Hootsuite представляют отчет о состоянии интернет-среды – Digital 2020. В указанных данных имеется информация о 298 млн. новых интернет-пользователей в сравнении с данными на январь 2019. Теперь, общее число пользователей оценивается в 4,54 млрд, это +7% за год. [2]
Также, с каждым годом число людей пользующихся мобильными телефонами растет, что делает интернет еще более доступным для, чуть ли не ежечасного посещения. По представленной статистике в среднем по всем данным пользователь проводит в интернете 6 часов 43 минуты каждый день, включая соц сети и прочие ресурсы. Эта цифра разница от страны к стране. [3]
Сайты создают каждый день. Рубеж в 1 млрд сайтов был пройден в 2016 году, а уже в 2017 году общее число веб-сайтов выросло до 1,7 млрд. на 2019 год их количество практически не изменилось – общее число сайтов в мире на тот момент составляло чуть более 1,7 млрд.[4]
Вычислительная сторона сайта
Вычисления производятся на каждом сайте. Для простого сайта-визитки это могут быть запросы к серверу за корректным откликом на событие нажатия кнопки или ссылки. Сервер должен произвести простые вычиления, например выдать нужынй каталог в зависимости от номера нажатой страницы. Бывают и более сложные вычисления, например одновременная работа с базой данных нескольких пользователей. 
Есть вычисления другого типа. Например сайты визуализации 3д моделей, решения систем уравнений или интегралов. Всё это – вычисления скрытые от пользователя, происходящие на сервере. Такие вычисления это часть back-end разработки сайта. Одни из языков back-end разработки являются PHP и С#.
Online версии desctop приложений и тенденции к этому
Эволюция приложений не стоит на месте и с нарастанием спроса на web-сервисы решающие задачи desktop приложений, некоторые большие приложения начали адаптировать под браузерный доступ. Так, не для кого не секрет, что уже не первый год отлично работает Microsoft office online, куда входят такие приложения как word, excel, power point и др. Данные програмы доступны с некоторыми ограничениями, но каждому кто имеет акаунт Microsoft. Уже не обязательно устанавливать оффис себе на компьютер или ноутбук если вам хватает функционала web версии. Это одно из приемуществ web-сервисов – не нужно ничего устанавливать, требуется только браузер. От сюда вытекает и второй плюс – программы совсем не занимают места, браузер по обьему меньше тех программ, к которым может дать доступ. Matlab, некоторые продукты Adobe, такие как Photoshop Express тоже доступны в онлайн версии.
Но у web-сервисов есть один большой недостаток – online подключение. Интернет доступен еще не во всех уголках планеты, а где он есть не всегда подключение стабильное и с достаточной скоростью передачи данных. Со всеми удобствами web-сервисов, такой формат всё еще не каждый может себе позволить.
PWA сайты как набирающий тренд решение.
Одним из решений таких проблем стало относительно новое направление PWA. Для Progressive Web Apps (PWA) нет чёткого определения. Можно сказать это нечто среднее между сайтом и приложением в том виде, в которых мы знакомы с каждым их них. Вот три главных принципа на которых строится PWA: 
•	Reliable – независимость от соединения с сетью интернет и статуса приложения.
•	Fast – быстрый взаимообмен данными, отзывчивый интерфейс.
•	Engaging – комфортная, удобная и приятная работа с приложением.
PWA и внешне и внутренне похож на обычное приложение. Разница лишь в том, что PWA обращается к своим ресурсам по HTTP протоколу, но хранящимся локально. Это одинаково работает на всех основных браузерах и на всех основных платформах. Еще одлно отличие в правах доступа к ресурсам системы, но этот вопрос можно решить, возможно вскоре у PWA появятся новые привелегии.
ASP.NET
ASP.NET является частью технологии .NET Framework пренадлежащей компании Microsoft. Последняя технология является платформой не только для создания Web-сервисов и ПО, но и для их непосредственного запуска. .NET Framework это высокопроизводительная среда, основанная на стандартах и поддерживающая множество языков. Она поддерживает интеграции приложений с сервисами следующего поколения и решает задачи web-приложений, основные из которых использование и развертываение. Данная система состоит из нескольких частей. 
•	Сommon Language Runtime – общеязыковая среда выполнения.
•	Различные библиотеки классов, построенные иерархическим образом. 
•	ASP.NET – компонентная версия ASP.
ASP.NET используется для создания интернет приложений и отличается мощностью клиент-серверной части. Другой особенностью является создание динамических HTML страниц, что добавляет удобство и простор для разработчика. В результате обьединения технологий ASP, используемых ранее и .NET Framework технологий возникла эта новая система, которая содержит разработанные и готорые к использованию элементы управления, которые позволяют достаточно быстро и удобно создавать web-сервисы. Не редко используются возможности, предоставляемые сайтами других разработчиков для пользователей разрабатываемого сайта. ASP.NET почти не имеет границ пременения в наше время, разработчик ограничен лишь собственным воображением.
	Раз были упомянуты динамически создаваемые HTML коды, то стоит разобраться в чем их отличение от статических и какие приемущества несут данные возможности. Статическая HTML страница также содержит код на языке разметки HTML. В данном случае при написании определяется внешний вид web-страницы для всех пользователей попавших на сайт. Исходя из названия можно понять, что никакие изменения без прямого редактирования файла HTML происходить не будут. Это значит что независимо от того когда, кто и с какого устройства будет выполнен вход, страница будет всегда и для всех выглядеть одним и тем же образом. HTML документа достаточно для разметки вывода информации, которая почти не будет подвержена изменениям и не будет иметь зависимостей от устройств или других условий просмотра страницы. HTML страница – это текст из таблицы символов ASCII, который поддерживается на любой операционной системе.
	Из выше сказанного следует, что формируя страницу с помощью разметки HTML мы добьемся совершенно статичного результата в плане содержимого. Внесенные данные при разработке – это вся информация которая будет на странице. Внесенные пользователем в дальнейшем данные никак не могут быть использованы для отображения нового содержимого, так как они не являются предварительно записанными в окончательный набор файлов сайта.
	Совершенно ясно, что при написании статической web-страницы курсов валют, за невозможностью менять информацию сайта программно, программисту бы пришлось обновлять HTML код вручную, каждый раз, когда курс валют изменится. Понятно и то, что данный способ разработки сайта в данном контексте никто не использует. Динамические страницы решают проблему поддержания актуальности информации на сайте на требуемом уровне. Наполнение страницы динамическим образом – это способ обмена информацией с пользователем, учитывая интересы последнего. Такое двустороннее сообщение происходит от клиента серверу и обратно.
	Веб страницы с динамической генерации HTML кода обычно проходят обработку на сервере перед отправкой клиенту. Самый тривиальный пример это программа, которая может изменять статические страницы запрашиваемые клиентом. Такая система использует хранилище данных и может опираться на параметры запроса. Даже такой простой пример решает ранее рассмотренную задачу. Программисту остается лишь подготовить одну html страницу, которая будет являться шаблоном, и программно изменять её на сервере перед отправкой пользователю. 
В самом начале развития интернета большая часть веб страниц использовала статический метод написание HTML кода. С каждым годом количество динамических страниц растёт. Это закономерность обусловлена тем, что каждый пользователь хочет видеть не только готовую информацию, но и непосредственно принимать участие в событиях, которые могут происходить каждый день. События могут являться как конкурсами и акциями, так и обновлением товаров в интернет магазине, актуальные новости, новое сообщения в блоге. Многие сайты обновляют информацию чаще чем раз в минуту. Динамическая генерации позволяет таргетировать информацию для каждого конкретного пользователя, а также быстро откликаться на его запросы через браузер. Для каждого из этих пунктов были разработаны специальные функции. Одной из таких функций является файлы cookies, которые способны сохранять пользовательские данные о настройке сайта или о личности потребителя.
Для такого рода процедур существуют языки программирования с функционалом для динамического изменение веб-сайтов. Во-первых, это скрипты на клиентской части системы. Данные скрипты можно писать на языке JS или VBscript. Особенность этих скриптов том, что они встроены в HTML-код, который браузер получает от сервера. Такие сценарии, именно так принято называть скрипты, обрамляются HTML тегами. Благодаря этому, браузер может интерпретировать данную часть кода как скрипт и вывести результат пользователю. Такие программы не большие. Если мы отправляем запрос к базе данных, то отображаемая пользователюи информация не должна превышать разумных пределов. Скрипты способны проверять корректность запроса пользователя для того, чтобы серверная часть сайта не обрабатывала запросы с ошибками. Существуют также скрипты, создающие эффекты анимации, но это другая тема. Возможности клиентской части скриптов не безграничны. Например для отправки SMS-сообщений скрипта на JavaScript будет недостаточно. Если страница использует анимацию, JavaScript скрипты она все равно считается статической.
Главная особенность динамический страницы в том что она создается «на лету» или на английском RunTime, то есть во время выполнения. Изначально сервер присылают пользователю страницу статического формата. В ответ на запросы от пользователя, сервер, который хранит исполняемые файлы програмы, которые могут быть написаны на С#, С++, Delphi или PHP, посылает пользователю HTML-код, который создал специально под обрабатываемую ситуацию.
Таким ответом может быть результат поиска в браузере, переход на другой веб-сайт, сообщение об успешной отправке письма другому человеку или  успешная авторизация.  Сервер принимает на вход данные которые ввёл пользователь.  Результат обработки это обновлённая web-страница.  cgi программа подразумевает выделение отдельного процесса для каждого запроса пользователя. Это означает , что если пользователей в один момент времени сделают Запрос к серверу то в итоге в памяти будет 100 процессов.  Масштабируемость такого сайта Очень низкая так как нет  плавного изменения времени ответа с увеличением числа одновременных запросов.
Старая технология ASP  была очень ограничена. в ней использовались языки скриптов ,  возможности которых нельзя было сравнить даже с самыми простыми языками программирования.  Html-код в виде специальных тегов внедрялся в код asp, что создавало большую путаницу,  так как  asp код  был разбросан по всему html-документу.  Проблема ещё заключалась в том, что html-код, по большей части создают дизайнеры, а asp код - программисты. ASP.NET  решает эту проблему возможностью разделить код в разные файлы. 
ASP.NET не  является продолжением старой технологии ASP.  Это система концептуально переработана корпорацией Microsoft, выполненное по правилам технологии .NET. ASP.NET  содержит в себе максимум для более простой поддержки web-приложения. Эта технология основана на ООП, и при этом сохранила  шаблоны ASP.  Где раньше исполняемая программа помещалась в директорию для работы на сервере.  Появилось множество новых технологий, а Всё старое было переосмыслено и доработано.
Например в asp.net теперь используется языки, которые требует компиляции до запуска. Это означает что теперь синтаксис кода будет проверяться  программой, в которой работает разработчик. Также скомпилированный код переводится в промежуточный язык. Код на данном языке выполняется быстрее и не зависит от того языка на котором мы разрабатываем. Также стоит отметить, что он поддерживает строготипизированные языки. Это  понижает риск ошибок конвертации типов, улучшая читаемость кода и имеет другие преимущества.
Компиляция кода происходит каждый раз автоматически, когда код был изменён и произошло обращение к серверу. Веб-страницы базируется на asp.net располагается платформа .NET Framework , которая взаимодействует с ОС. 
В 2004 году появилась вторая версия asp.net. С приходом обновления объём кодирования сократился на 70%.  На сегодняшний день последней версии является пятая.  С годами разработчики поддерживали главные цели системы -  высокая скорость разработки, администрирование, повышение скорости работы сервера, масштабируемости, лёгкой поддержке сайтов  разделение функциональных частей кода.
ASP.NET — это технология, поддерживающая разные языки программирования, такие как С#, Visual Basic, Но именно язык С# был специально создан для данной платформы.  Именно этот язык позволяет применить максимум концепций, методов и паттернов объектно-ориентированной разработки. Для начала работы с ASP.NET  следует понимать основы создание сайтов на HTML CSS, а также уметь писать на Java скрипт.
 
Обзор альтернатив для символьной математики. 
	Математические вычисления окружают любую профессию. Именно поэтому программы облегчающие данный процесс пользуются большой популярностью.  Наиболее популярная система используется конечно по большей части учащимися школ и вузов. Но, понятно, что несмотря на популярность данных сервисов , это лишь Малая часть вычислений которое происходит в мире каждый день.  
Посмотрим плюсы и минусы как простых программ рассчитанных больше на обучающихся тем или иным профессиям или школ,  так и профессиональные средства используемые в мире крупными корпорациями и миллионами профессионалов.
Photomath. (фото режим – поддержка документов MS)
Это популярное среди школьников и студентов программа.  Она существует на всех популярных платформах, как на десктопе так и для смартфона.  Разработчики позиционируют своё детище как нечто большее чем калькулятор. Данная система помогает производить вычисления По формулам внесенным тем или иным образом.  
Главной особенностью приложения такого рода является распознавание печатного текста. Это удобно тем что пользователи не нужно вручную вводить ту или иную формулу. достаточную навести с камерой на смартфоне или загрузить фотографию на компьютере программа тут-же расшифровывает запрос и выдаст ответ.  Распознавание текста работает в 9 из 10 случаев. На случай ошибки предусмотрено возможность редактирование формулы. Распознавание текста с вычислением ответа происходит мгновенно.  
Конечно, существует возможность ввести формулу вручную с помощью удобного интерфейса создания формул.  Пока что данная программа не умеет распознавать рукописный текст, что не является большой проблемой так как как всё приложение рассчитано на школьника или студента,  здание для которого было выдано в печатном виде. 
Программа может рассчитывать логарифмы частично занимается интегралами и позволяет решать уравнения с двумя неизвестными. Это неплохой помощник для учащихся и иногда для их родителей , но даже на высших курсах математических вузов программа уже не сможет справляться вычислениями  поставленными перед старшекурсниками. 
Geometryx. (Визульно понятные вычисления)
Данное приложение целиком и полностью направлены на геометрические расчёты.  Она позволяет быстро и визуально понятно  произвести расчёт  связаны с основными геометрическими фигурами.  
Такое приложение способно например вычислить объём, периметр, высоту, длину стороны, диагонали, меры углов, я и многие другие  геометрические задачи.  Также как и предыдущие приложения она обладает моментальный вычислительной способностью.  Также может подсказать ввод каких данных следует добавить,  если вычисление не может быть произведено по той или иной теореме.  
Данное приложение содержит изображение вычисляемых фигур с подробным обозначением каждой части объекта.  Помогает визуально понять учащемуся какие именно составляющие были введены ,где они располагаются на фигуре  и какая часть объекта была вычислена. 
 Несмотря на немалые спектр возможностей данные приложений нельзя назвать профессиональным.  Оно как и предыдущий вариант является скорее помощником для  решение учебных задач. Узкая направленность приложения не предусматривает не только темы за пределами геометрии, но даже в этих рамках вычисление происходят  по доброму формулам которые были отобраны для максимального покрытия геометрических задач стоящих перед учеником. Даны формулы не поддерживают возложенных вычислений, нестандартных решений, задач вне школьной или ВУЗовский программы.
ru.numberempire.com
www.mathway.com
MATLAB.
Моя система.
Вычислительных программ очень много. Каждый из представленных систем является представителем множества похожих друг на друга программ. Совершенно определенное сейчас нет смысла создавать вычислительное приложение если оно не будет включать полезные, отличающие его от других функциональные возможности. Такими возможностями в моём случае являются:
	Цикличные вложенные вычисления.
	Функционал  вложенных вычислений позволяет упростить формулу посредствам вынесение часто используемые повторяющиеся функции за пределы основной формулы.  Такой ряд формы может складываться друг друга  в любом порядке за исключением случаев  неконтролируемый рекурсии.  Это позволит создавать большие по объёму вычислений формулы каждый из которых будет представлена в виде иерархично упорядоченно множества формул.  Такой подход визуально лучше воспринимается человеком Так как каждая  формула из этого множества  является частью чего-то большего и как следствие мала по объёму  и более понятна к понимаю.  Второй плюс такого подхода заключается в том , что каждое из вычислений по вынесенной формуле можно легко изменить в одном месте, тем самым изменив  логику расчёта каждом месте вызова данных формулы, которых может быть как две так и сто. И в ином случае пришлось бы менять сто участков в каждой формуле, что очень длительная по времени задача для человека.
	Цикличное вычисление подразумевают использование формулы множество раз заодно  обращение пользователя.  Это значит что пользователь может заготовить входные параметры для множества вычислений по одной формуле и программа вычислит ответ по каждому из набора данных пределах одного обращения пользователя к серверу.  Такой подход позволяет обрабатывать большое количество данных по одной и той же формуле без без необходимости каждый раз изменять начальную данные. Длительность этих вычислений напрямую зависит от  итераций расчетов.
Работа с файлами.  Так я планирую браузерное приложение, рассчитанное по большей части на работу с компьютером я решил осуществить поддержку файлов Microsoft Office.  В рассмотренного ранее приложении Photomath  использовалась система распознавания текста.  Это очень удобно поскольку и не нужно вводить текст вручную,  но такой способ, На мой взгляд, больше удобен для сканирования обучающих материалов.  Другое большое удобство заключается в том что что в теории пользователь может отсканировать текст который сможет написать на листе ручкой намного быстрее чем пользуясь даже самым удобным интерфейсом программы. Но распознавание рукописного текста это очень непростая задача, вероятность неправильной интерпретации обратно зависит от каллиграфических навыков пользователя.  Из плюсов в данном случае стоит рассматривать лишь возможность быстро считать формулу, находящуюся на том или ином носителе информации.  Вложенность формул, которую я хочу внедрить в систему сложно реализовать через  сканирование даже напечатанного текста.  Так как формуле станут присутствовать не только искомое Неизвестная но и посторонние обозначение функций от скольки-то переменных.  Помимо этого обозначения должно быть установлено соответствие между названием и реализации вынесенные в другое место формулы.  Подробнее данная система будет рассмотрена во второй главе.  Использование файлов Microsoft Office позволяет создавай, сохраняет, передавать построенные формулы  как от пользователя серверу так и от пользователя к пользователю.  Помимо удобного интерфейса создание формул присутствующий в каждой  программы входящие в Microsoft Office,  данные документы могут хранить  и другую полезную для пользователя информацию.  Например набор рассчитываемых параметров как для одного  вычисления так и для множества вычислений сразу. Помимо этого можно создавать множество формул которые не только могут быть вложены друг в друга, но и могут являться отдельными единицами вычисляемыми в порядке очереди.  Так как на сервер может быть загружено больше 1 файла одновременно , в совокупности это всё открывает большой Спектр возможностей для вычисления в требуемых областях.  Пользователь может создать один документ с множеством формул и и описанием каких работе  добавив туда да примеры вычисления или реальные данные заменяемые каждый новый необходимостью.  Или можно создать десятки документов , каждый из которых будет tut.by выполнять определенную функцию.
	Поддержка больших чисел. 
Многие системы вычислений имеют критичная в очень редких ситуациях ограничений.  Например не каждая система сможет показать результат вычисления факториала от 279.  Ограничение в основном водит из-за высоких нагрузках на систему.  А может такие вычисления понадобятся в лучшем случае одному человеку из 1000.  В каких ситуациях можно обойтись примерными расчётами рассчитав хотя бы порядок получаемого числа.  Но существует направление которое требует не только оперирование с такими большими числами, но и высокую точность вычислений в разумных временных пределах.  Точность относится не только к к большим числам 200 порядка и выше, но и к дробям,  Чья не целая часть может быть меньше 1 миллиардной.  Даже простейшие операции с такими числами создает большую нагрузку на производительность не могут вычисляться  минуту, час и больше в зависимости от величины числа и его точности. Реализация данной системы будет рассмотрена подробнее во второй главе.
